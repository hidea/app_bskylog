// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    posts,
  ];
  late final Shape0 posts = Shape0(
      source: i0.VersionedTable(
        entityName: 'posts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get feedAuthorDid =>
      columnsByName['feed_author_did']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get uri =>
      columnsByName['uri']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get authorDid =>
      columnsByName['author_did']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get indexed =>
      columnsByName['indexed']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get replyDid =>
      columnsByName['reply_did']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get havEmbedImages =>
      columnsByName['hav_embed_images']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get havEmbedExternal =>
      columnsByName['hav_embed_external']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get havEmbedRecord =>
      columnsByName['hav_embed_record']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get havEmbedRecordWithMedia =>
      columnsByName['hav_embed_record_with_media']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get havEmbedVideo =>
      columnsByName['hav_embed_video']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get reasonRepost =>
      columnsByName['reason_repost']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get post =>
      columnsByName['post']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('feed_author_did', aliasedName, false,
        type: i1.DriftSqlType.string, defaultValue: Constant(''));
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('uri', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'));
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('author_did', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_4(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('indexed', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('reply_did', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_6(String aliasedName) =>
    i1.GeneratedColumn<bool>('hav_embed_images', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("hav_embed_images" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_7(String aliasedName) =>
    i1.GeneratedColumn<bool>('hav_embed_external', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("hav_embed_external" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_8(String aliasedName) =>
    i1.GeneratedColumn<bool>('hav_embed_record', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("hav_embed_record" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_9(String aliasedName) =>
    i1.GeneratedColumn<bool>('hav_embed_record_with_media', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("hav_embed_record_with_media" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_10(String aliasedName) =>
    i1.GeneratedColumn<bool>('hav_embed_video', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("hav_embed_video" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_11(String aliasedName) =>
    i1.GeneratedColumn<bool>('reason_repost', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("reason_repost" IN (0, 1))'));
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('post', aliasedName, false,
        type: i1.DriftSqlType.string);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
